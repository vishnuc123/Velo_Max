<header class="bg-white shadow-md fixed w-screen z-20">
  <div class="container mx-auto px-4 py-2">
    <div class="flex items-center justify-between">
      <!-- Logo -->
      <a href="#" class="flex items-center space-x-2">
        <img
          src="/User/images/login/logo original.jpg"
          alt="Logo"
          class="w-30 h-14 md:w-30 md:h-20 mix-blend-multiply"
        />
      </a>

      <!-- Navigation -->
      <nav class="hidden md:flex space-x-6">
        <a href="/User/dashboard" class="text-gray-600 hover:text-purple-700"
          >Home</a
        >
        <a
          href="/dashboard/products"
          class="text-gray-600 hover:text-purple-700"
          >Products</a
        >
        <a href="#" class="text-gray-600 hover:text-purple-700">Brands</a>
        <a href="#" class="text-gray-600 hover:text-purple-700">Deals</a>
        <a href="#" class="text-gray-600 hover:text-purple-700">About us</a>
        <a href="#" class="text-gray-600 hover:text-purple-700">Contact Us</a>
      </nav>

      <!-- Right side elements -->
      <div class="flex items-center space-x-4">
        <button
          class="bg-gray-200 text-gray-700 px-4 py-2 rounded-full hover:bg-gray-300 transition duration-300"
        >
          Shop Now
        </button>
        <div class="relative">
          <select
            class="appearance-none bg-transparent pr-8 py-2 text-gray-700 hover:text-purple-700 focus:outline-none"
          >
            <option>US</option>
            <option>CA</option>
            <option>UK</option>
          </select>
          <div
            class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700"
          >
            <svg
              class="fill-current h-4 w-4"
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 20 20"
            >
              <path
                d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z"
              />
            </svg>
          </div>
        </div>
        <div class="relative inline-block">
          <!-- Account Icon -->
          <a 
            href="#" 
            class="text-gray-600 hover:text-purple-700"
            onclick="toggleDropdown(event)"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="h-6 w-6"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"
              />
            </svg>
            <span class="sr-only">Account</span>
          </a>
        
          <!-- Dropdown -->
          <div
            id="dropdown"
            class="absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg border border-gray-200 hidden"
          >
            <div class="p-4">
              <p class="text-sm font-medium text-gray-700" id="user-name">John Doe</p>
              <p class="text-xs text-gray-500" id="user-email">johndoe@example.com</p>
            </div>
            <div class="border-t border-gray-200"></div>
            <ul class="py-2">
              <li>
                <a
                  href="/account"
                  class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                >
                  Account
                </a>
              </li>
              <li>
                <a
                  href="/orders"
                  class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                >
                  Orders
                </a>
              </li>
              <li>
                <a
                  href="/logout"
                  class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                >
                  logout
                </a>
              </li>
            </ul>
          </div>
        </div>

        
        <!-- Cart Button -->
        <button
          id="cart-button"
          class="relative right-3 p-1 bg-white rounded-full shadow-lg z-50"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="h-6 w-6"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z"
            />
          </svg>
          <span class="sr-only">Cart</span>
          <span
            class="absolute -top-1 -right-1 bg-yellow-400 text-xs w-4 h-4 rounded-full flex items-center justify-center"
            >1</span
          >
        </button>
      </div>
    </div>
  </div>

  <!-- cart sidebar -->
   
    <!-- Cart Sidebar -->
    <div id="cart-sidebar" class="fixed inset-y-0 right-0 w-full sm:w-[480px] bg-white shadow-lg transform transition-transform duration-300 translate-x-full z-50">
      <!-- Header -->
      <div class="flex items-center justify-between p-6 border-b">
          <h2 class="text-2xl font-normal">Cart</h2>
          <button id="close-cart" class="p-2 hover:bg-gray-100 rounded-full">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
              </svg>
          </button>
      </div>

      <!-- Cart Items -->
      <div class="overflow-y-auto h-[calc(100vh-180px)] p-6" id="cart-container">
          <!-- displaying cart here -->
      </div>

      <!-- Footer -->
      <div class="absolute bottom-0 left-0 right-0 bg-white border-t p-6">
          <div class="flex justify-between mb-4">
              <span class="text-lg">TOTAL:</span>
              <span class="text-lg font-medium" id="cart-total-price">€ 100.00</span>
          </div>
          <button class="w-full bg-black text-white py-4 rounded-lg hover:bg-gray-900 transition-colors" id="cart-checkout">
              Checkout
          </button>
      </div>
  </div>

  <!-- Overlay -->
  <div id="cart-overlay" class="fixed inset-0 bg-black/50 hidden z-40"></div>


  <!-- Breadcrumb -->
  <div class="bg-gray-100 py-2">
    <div class="container mx-auto px-4">
      <nav class="text-sm" aria-label="Breadcrumb">
        <ol class="list-none p-0 inline-flex">
          <li class="flex items-center">
            <a href="#" class="text-gray-600 hover:text-purple-700"
              >Get Dive into Cycle World</a
            >
            <svg
              class="fill-current w-3 h-3 mx-3"
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 320 512"
            >
              <path
                d="M285.476 272.971L91.132 467.314c-9.373 9.373-24.569 9.373-33.941 0l-22.667-22.667c-9.357-9.357-9.375-24.522-.04-33.901L188.505 256 34.484 101.255c-9.335-9.379-9.317-24.544.04-33.901l22.667-22.667c9.373-9.373 24.569-9.373 33.941 0L285.475 239.03c9.373 9.372 9.373 24.568.001 33.941z"
              />
            </svg>
          </li>
        </ol>
      </nav>
    </div>
  </div>
</header>
<script>


const checkoutButton = document.getElementById('cart-checkout')
checkoutButton.addEventListener('click',async () => {
  window.location.href = '/cartcheckout';
  
})

async function getCartItems() {
  const response = await axios.get('http://localhost:4000/getCartItems');
  const data = response.data;

  console.log(data);

  const cartContainer = document.getElementById('cart-container');
  const cartTotalElement = document.getElementById('cart-total-price'); // Assuming a span element with this class for total

  if (data.cartItems.length === 0) {
    cartContainer.innerHTML = `
 <p class="text-gray-600">Your cart is empty.</p>
  <button onclick="window.location.href='/dashboard/products'" class="btn btn-primary mt-4">Browse Products &#8594;</button>
`;
    cartTotalElement.textContent = '₹ 0.00';
    return;
  }

  let totalPrice = 0; // Initialize total price

  // Clear previous cart content
  cartContainer.innerHTML = '';

  data.cartItems.forEach((item, index) => {
    const itemPrice = item.product.ListingPrice * item.cartItem.quantity || 1; // Multiply price by stock quantity
    totalPrice += itemPrice; // Add item price to total

    const cartItemHTML = `
      <div class="flex gap-6 pb-6 border-b" data-item-id="${item.productId}">
        <div class="w-32 h-32 bg-gray-50 rounded-lg overflow-hidden">
          <img src="${item.product.coverImage || '/placeholder.svg?height=128&width=128'}" alt="Product" class="w-full h-full object-cover">
        </div>
        <div class="flex-1">
          <h3 class="text-lg font-medium">${item.product.productName}</h3>
          <div class="flex items-center justify-between mt-4">
            <div class="flex items-center border rounded">
              <button class="px-3 py-1 hover:bg-gray-100 decreaseBtn" data-index="${index}">-</button>
              <span class="px-3 py-1 border-x quantityInput" data-index="${index}" >${item.cartItem.quantity || 1}</span>
              <button class="px-3 py-1 hover:bg-gray-100 increaseBtn" data-index="${index}">+</button>
            </div>
            <p class="text-lg font-medium itemPrice">₹ ${itemPrice.toFixed(2)}</p>
          </div>
          <button 
            class="mt-4 text-gray-500 hover:text-gray-700" 
            onclick="removeCartItem('${item.productId}')">
            Remove
          </button>
        </div>
      </div>
    `;
    cartContainer.innerHTML += cartItemHTML;
  });

  // Update the total price
  cartTotalElement.textContent = `₹ ${totalPrice.toFixed(2)}`;

  // Attach event listeners to all increase and decrease buttons
  document.querySelectorAll('.increaseBtn').forEach(button => {
    button.addEventListener('click', async () => {
      const index = button.getAttribute('data-index');
      const quantityInput = document.querySelectorAll('.quantityInput')[index];
      const item = data.cartItems[index];

      // Increase quantity, ensuring it doesn't exceed 5
      if (parseInt(quantityInput.textContent) < 5) {
        quantityInput.textContent = parseInt(quantityInput.textContent) + 1;
        item.quantity = parseInt(quantityInput.textContent);

        // Update the price
        const itemPrice = item.product.ListingPrice * item.quantity;
        button.closest('.flex-1').querySelector('.itemPrice').textContent = `₹ ${itemPrice.toFixed(2)}`;

        // Recalculate the total price
        totalPrice = 0;
        document.querySelectorAll('.itemPrice').forEach(itemPriceElement => {
          totalPrice += parseFloat(itemPriceElement.textContent.replace('₹ ', '').replace(',', ''));
        });
        cartTotalElement.textContent = `₹ ${totalPrice.toFixed(2)}`;

        try {
          await axios.post('http://localhost:4000/updateCartItem', {
            productId: item.productId,
            quantity: item.quantity,
            price:itemPrice
          });
          
        } catch (error) {
          console.error('Error updating cart item:', error);
        }
      }
    });
  });

  document.querySelectorAll('.decreaseBtn').forEach(button => {
    button.addEventListener('click',async () => {
      const index = button.getAttribute('data-index');
      const quantityInput = document.querySelectorAll('.quantityInput')[index];
      const item = data.cartItems[index];

      // Decrease quantity, ensuring it doesn't go below 1
      if (parseInt(quantityInput.textContent) > 1) {
        quantityInput.textContent = parseInt(quantityInput.textContent) - 1;
        item.quantity = parseInt(quantityInput.textContent);

        // Update the price
        const itemPrice = item.product.ListingPrice * item.quantity;
        button.closest('.flex-1').querySelector('.itemPrice').textContent = `₹ ${itemPrice.toFixed(2)}`;

        // Recalculate the total price
        totalPrice = 0;
        document.querySelectorAll('.itemPrice').forEach(itemPriceElement => {
          totalPrice += parseFloat(itemPriceElement.textContent.replace('₹ ', '').replace(',', ''));
        });
        cartTotalElement.textContent = `₹ ${totalPrice.toFixed(2)}`;

        try {
          await axios.post('http://localhost:4000/updateCartItem', {
            productId: item.productId,
            quantity: item.quantity,
            price:itemPrice
          });
        } catch (error) {
          console.error('Error updating cart item:', error);
        }
      
      }
    });
  });
}

getCartItems();




const cartButton = document.getElementById('cart-button');
const cartSidebar = document.getElementById('cart-sidebar');
const cartOverlay = document.getElementById('cart-overlay');
const closeButton = document.getElementById('close-cart');

function toggleCart() {
    const isCartOpen = !cartSidebar.classList.contains('translate-x-full'); // Check if the cart is currently open
    
    // Toggle cart visibility
    cartSidebar.classList.toggle('translate-x-full');
    cartOverlay.classList.toggle('hidden');
    document.body.classList.toggle('overflow-hidden');

    // Reload the page when the cart is closed
    if (isCartOpen && cartSidebar.classList.contains('translate-x-full')) {
        window.location.reload();
    }
}

cartButton.addEventListener('click', toggleCart);
closeButton.addEventListener('click', toggleCart);
cartOverlay.addEventListener('click', toggleCart);

document.addEventListener('keydown', function(event) {
    if (event.key === 'Escape' && !cartSidebar.classList.contains('translate-x-full')) {
        toggleCart();
    }
});
        function toggleDropdown(event) {
    event.preventDefault(); // Prevent default link behavior
    const dropdown = document.getElementById('dropdown');
    dropdown.classList.toggle('hidden'); // Tailwind's `hidden` class
  }

  // Example: Update user info dynamically
  document.getElementById('user-name').textContent = 'Jane Doe';
  document.getElementById('user-email').textContent = 'jane.doe@example.com';

  async function removeCartItem(itemId) {
  try {
    // Send DELETE request to the backend
    const response = await axios.delete('http://localhost:4000/removeCartItem', {
      data: { itemId }
    });

    if (response.status === 200) {
      alert('Item removed successfully');
      window.location.reload()
      // Refresh cart items
      document.getElementById('cart-container').innerHTML = ''; // Clear the current cart items
      getCartItems(); // Fetch updated cart items
    }
  } catch (error) {
    console.error('Failed to remove item:', error);
    alert('Failed to remove item. Please try again.');
  }
}




</script>
