<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css">
<header class="bg-white shadow-md fixed w-screen z-20">
  <!-- Navbar Container -->
<div class="fixed w-full bg-white shadow-md px-4 py-3 md:flex md:items-center md:justify-between">
  <div class="flex items-center justify-between">
    <!-- Logo -->
    <a href="#" class="flex items-center space-x-2">
      <img src="/User/images/login/logo original.jpg" alt="Logo" class="w-30 h-14 md:w-30 md:h-20 mix-blend-multiply" />
    </a>

    <!-- Mobile Menu Button -->
    <button id="mobile-menu-button" class="md:hidden text-gray-600 focus:outline-none">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
          d="M4 6h16M4 12h16m-7 6h7" />
      </svg>
    </button>
  </div>

  <!-- Navigation Menu (Hidden by default on mobile) -->
  <nav id="mobile-menu" class="hidden md:flex flex-col flex md:flex-row  md:items-center space-y-4 md:space-y-0 md:space-x-6 mt-4 md:mt-0">
    <a href="/User/dashboard" class="text-gray-600 hover:text-purple-700">Home</a>
    <a href="/dashboard/products" class="text-gray-600 hover:text-purple-700">Products</a>
    <a href="/brands" class="text-gray-600 hover:text-purple-700">Brands</a>
    <a href="/aboutUs" class="text-gray-600 hover:text-purple-700">About us</a>
    <a href="/contactUs" class="text-gray-600 hover:text-purple-700">Contact Us</a>
  </nav>

  <!-- Right Side Elements -->
  <div class="flex items-center space-x-4 justify-end">
    <button id="shopNow"
    class="hidden md:block bg-gray-200 text-gray-700 px-4 py-2 rounded-full hover:bg-gray-300 transition duration-300">
    Shop Now
  </button>
  

    <!-- Language Selector -->
    <div class="relative">
      <select class="hidden appearance-none bg-transparent pr-8 py-2 text-gray-700 hover:text-purple-700 focus:outline-none">
        <option>US</option>
        <option>CA</option>
        <option>UK</option>
      </select>
      <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700">
        <svg class="fill-current h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
          <path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z" />
        </svg>
      </div>
    </div>

    <!-- Account Dropdown -->
    <div class="relative">
      <a href="#" class="text-gray-600 hover:text-purple-700" onclick="toggleDropdown(event)">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
            d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
        </svg>
        <span class="sr-only">Account</span>
      </a>

      <!-- Dropdown Menu -->
      <div id="dropdown"
        class="absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg border border-gray-200 hidden">
        <div class="p-4">
          <p class="text-sm font-medium text-gray-700" >Check It Out</p>
          <p class="text-xs text-gray-500">Orders Wallet Address Profile</p>
        </div>
        <div class="border-t border-gray-200"></div>
        <ul class="py-2">
          <li><a href="/account" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Account</a></li>
          <li><a href="/orders" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Orders</a></li>
          <li><a href="/logout" onclick="clearStorage()"  class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Logout</a></li>
        </ul>
      </div>
    </div>

    <!-- Cart Button -->
    <button id="cart-button" class="relative p-1 bg-white rounded-full shadow-lg z-50">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
          d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z" />
      </svg>
      <span class="sr-only">Cart</span>
      <span class="absolute -top-1 -right-1 bg-yellow-400 text-xs w-4 h-4 rounded-full flex items-center justify-center">1</span>
    </button>

    <!-- Wishlist Button -->
    <button id="wishlist-button"
      class="relative flex items-center space-x-1 p-2 bg-white rounded-full shadow-lg z-50 hover:bg-gray-100 transition">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-800" fill="none" viewBox="0 0 24 24"
        stroke="currentColor" stroke-width="2">
        <path stroke-linecap="round" stroke-linejoin="round"
          d="M4.318 6.318a4.5 4.5 0 016.364 0L12 7.636l1.318-1.318a4.5 4.5 0 116.364 6.364L12 20.364l-7.682-7.682a4.5 4.5 0 010-6.364z" />
      </svg>
      <span class="text-sm font-medium text-gray-600">Wishlist</span>
    </button>

  </div>
</div>


  <!-- cart sidebar -->
   
    <!-- Cart Sidebar -->
    <div id="cart-sidebar" class="fixed inset-y-0 right-0 w-full sm:w-[480px] bg-white shadow-lg transform transition-transform duration-300 translate-x-full z-50">
      <!-- Header -->
      <div class="flex items-center justify-between p-6 border-b">
          <h2 class="text-2xl font-normal">Cart</h2>
          <button id="close-cart" class="p-2 hover:bg-gray-100 rounded-full">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
              </svg>
          </button>
      </div>

      <!-- Cart Items -->
      <div class="overflow-y-auto h-[calc(80vh-180px)] p-6" id="cart-container">
      </div>
      
      <!-- Footer -->
      <div class="absolute bottom-0 left-0 right-0 bg-white border-t p-6">
        <!-- <a href="/cartDetailedPage" 
        class="block w-full text-center text-black underline italic text-lg py-4 rounded-lg mb-4 hover:transition-colors animate-bounce">
        See Items details in Your Cart ðŸ›’ -->
     <!-- </a> -->
        <div class="flex justify-between mb-4">
              <span class="text-lg">TOTAL:</span>
              <span class="text-lg font-medium" id="cart-total-price">â‚¬ 100.00</span>
          </div>
          <button class="relative w-full py-4 px-6 overflow-hidden font-bold rounded-lg group bg-gradient-to-br from-gray-800 to-gray-600 text-white hover:from-black hover:to-gray-700 focus:ring-4 focus:ring-gray-400 focus:outline-none transition-all duration-300 ease-in-out transform hover:scale-105 active:scale-95 shadow-lg hover:shadow-xl" id="cart-checkout">
            <span class="absolute right-0 w-8 h-32 -mt-12 transition-all duration-1000 transform translate-x-12 bg-white opacity-10 rotate-12 group-hover:-translate-x-40 ease"></span>
            <span class="relative flex items-center justify-center">
                <svg class="w-6 h-6 mr-2 animate-pulse" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z"></path>
                </svg>
                Checkout
            </span>
        </button>
      </div>
  </div>

  <!-- Overlay -->
  <div id="cart-overlay" class="fixed inset-0 bg-black/50 hidden z-40"></div>


  <!-- Breadcrumb -->
  <div class="bg-gray-100 py-2">
    <div class="container mx-auto px-4">
      <nav class="text-sm" aria-label="Breadcrumb">
        <ol class="list-none p-0 inline-flex">
          <li class="flex items-center">
            <a href="#" class="text-gray-600 hover:text-purple-700"
              >Get Dive into Cycle World</a
            >
            <svg
              class="fill-current w-3 h-3 mx-3"
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 320 512"
            >
              <path
                d="M285.476 272.971L91.132 467.314c-9.373 9.373-24.569 9.373-33.941 0l-22.667-22.667c-9.357-9.357-9.375-24.522-.04-33.901L188.505 256 34.484 101.255c-9.335-9.379-9.317-24.544.04-33.901l22.667-22.667c9.373-9.373 24.569-9.373 33.941 0L285.475 239.03c9.373 9.372 9.373 24.568.001 33.941z"
              />
            </svg>
          </li>
        </ol>
      </nav>
    </div>
  </div>
  

  <!-- back button -->
   <div class="fixed bottom-4 left-4">

     <button class="bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded shadow" onclick="history.back()">
      &#8592;
     </button>
   </div>

  <style>
    /* Custom scrollbar styles */
#cart-container::-webkit-scrollbar {
    width: 14px;
}
#cart-container::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}
#cart-container::-webkit-scrollbar-thumb {
    background: linear-gradient(45deg, #555, #000);
    border-radius: 10px;
    border: 3px solid #1c1c1c;
}
#cart-container::-webkit-scrollbar-thumb:hover {
    background: linear-gradient(45deg, #888, #333);
    box-shadow: 0 0 10px #000;
}
#cart-container {
    scrollbar-width: thin;
    scrollbar-color: rgb(0, 0, 0) #f2f2f2;
}

  </style>
</header>
<script>
  const eventSource = new EventSource('/events');
eventSource.onmessage = function (event) {
  if (event.data === 'productStatusBlocked') {
    console.log('Product status updated. Refreshing cart items...');
    getCartItems();
    fetchCart();
  }else if(event.data === 'offerCreated'||event.data === 'offerDeleted'){
    getCartItems();
    fetchCart();
  } 
  else {
    getCartItems();
    fetchCart();
  }
};


function clearStorage() {
    localStorage.clear(); // Clears all localStorage data
    sessionStorage.clear(); // Clears sessionStorage data (optional)
  }

document.getElementById("mobile-menu-button").addEventListener("click", function () {
    document.getElementById("mobile-menu").classList.toggle("hidden");
  });

const shopNowButton = document.getElementById('shopNow')
shopNowButton.addEventListener('click', () => {
  window.location.href = '/dashboard/products'
})
const checkoutButton = document.getElementById('cart-checkout');

checkoutButton.addEventListener('click', async () => {
  try {
    const response = await axios.get('/getCartItems');

    const cartContainer = document.getElementById('cart-container');
    const cartContainerText = cartContainer ? cartContainer.textContent.trim() : "";
    const cartContainerHTML = cartContainer ? cartContainer.innerHTML.trim() : "";

    if (response.data.cartItems.length === 0 || cartContainerText === "Your cart is empty" || cartContainerHTML.includes('Your cart is empty')) {
      // Animated SweetAlert for empty cart
      await Swal.fire({
        title: "Your Cart is Empty",
        text: "Please add items to your cart before checking out.",
        showConfirmButton: false,
        timer: 3000,
        timerProgressBar: true,
        position: 'top',
        customClass: {
          popup: 'max-w-md w-full p-4 bg-white shadow-lg rounded-lg fixed top-10 left-1/2 transform -translate-x-1/2 flex items-center space-x-4 transition-all ease-in-out duration-500',
          image: 'rounded-md order-first',
          title: 'text-lg font-semibold text-gray-800 text-left',
          htmlContainer: 'flex-grow',
          text: 'text-sm text-gray-600 text-left',
        },
        html: `
          <button onclick="window.location.href='/dashboard/products'" class="btn btn-primary mt-4">Discover Products You Might Like &#8594;</button>
        `,
        backdrop: `rgba(0,0,0,0.4) left top no-repeat`,
        willOpen: () => {
          document.querySelector('.swal2-popup').style.opacity = '0';
        },
        didOpen: () => {
          document.querySelector('.swal2-popup').style.transition = 'opacity 0.5s ease-in-out';
          document.querySelector('.swal2-popup').style.opacity = '1';
        },
      });
    } else {
      // Cart has items and is not empty, proceed to checkout page
      window.location.href = '/cartcheckout';
    }
  } catch (error) {
    console.error('Error fetching cart items:', error);
    
    // Animated SweetAlert for error
    await Swal.fire({
      icon: 'error',
      title: 'Oops...',
      text: 'There was an error checking your cart. Please try again later.',
      background: '#000000',
      color: '#ffffff',
      iconColor: '#ffffff',
      showClass: {
        popup: 'animate__animated animate__shakeX animate__faster'
      },
      hideClass: {
        popup: 'animate__animated animate__fadeOut animate__faster'
      },
      customClass: {
        container: 'bg-black border border-white rounded-lg shadow-xl',
        title: 'text-2xl font-bold text-white mb-2',
        content: 'text-gray-300',
        confirmButton: 'bg-white text-black px-4 py-2 rounded hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-white focus:ring-opacity-50'
      }
    });
  }
});




async function getCartItems() {
  try {
    const response = await axios.get('/getCartItems');
    const data = response.data;


    const cartContainer = document.getElementById('cart-container');
    const cartTotalElement = document.getElementById('cart-total-price');

    // Filter only items where isBlocked is false
    const validCartItems = data.cartItems.filter(
      (item) => !item.productDetails.isblocked
    );

    if (validCartItems.length === 0) {
      cartContainer.innerHTML = `
        <p class="text-gray-600">Your cart is empty.</p>
        <button onclick="window.location.href='/dashboard/products'" class="btn btn-primary mt-4">
          Browse Products &#8594;
        </button>
      `;
      cartTotalElement.textContent = 'â‚¹ 0.00';
      return;
    }

    let totalPrice = 0;

    // Clear previous cart content
    cartContainer.innerHTML = '';

    // Generate cart items dynamically
    validCartItems.forEach((item, index) => {
      const stock = item.productDetails.Stock;
      const actualPrice = item.productDetails.ListingPrice;

      // Determine discounted price (product or category offer)
      const discountPrice = item.offers.productOffer
  ? item.offers.productOffer.discountType === 'percentage'
    ? actualPrice * (1 - item.offers.productOffer.discountValue / 100)
    : actualPrice - item.offers.productOffer.discountValue
  : item.offers.categoryOffer
  ? item.offers.categoryOffer.discountType === 'percentage'
    ? actualPrice * (1 - item.offers.categoryOffer.discountValue / 100)
    : actualPrice - item.offers.categoryOffer.discountValue
  : actualPrice;



      // Calculate item price based on quantity
      const itemPrice = discountPrice * item.quantity;
      totalPrice += itemPrice;

      let stockStatusHTML = '';
      if (stock <= 0) {
        stockStatusHTML = `<p class="text-red-600 font-semibold mt-2">Oops! Out of Stock</p>`;
      } else if (stock > 0 && stock <= 5) {
        stockStatusHTML = `<p class="text-orange-500 font-semibold mt-2">Hurry up! Only ${stock} left in stock</p>`;
      }

      let offerHTML = '';
      if (item.offers.productOffer) {
        offerHTML = `
          <p class="text-sm text-green-600 font-medium mt-2">
            Product Offer: ${item.offers.productOffer.offerName} 
            (${item.offers.productOffer.discountType === 'percentage' 
              ? item.offers.productOffer.discountValue + '% Off' 
              : 'â‚¹ ' + item.offers.productOffer.discountValue + ' Off'})
          </p>`;
      } else if (item.offers.categoryOffer) {
        offerHTML = `
          <p class="text-sm text-blue-600 font-medium mt-2">
            Category Offer: ${item.offers.categoryOffer.offerName} 
            (${item.offers.categoryOffer.discountType === 'percentage' 
              ? item.offers.categoryOffer.discountValue + '% Off' 
              : 'â‚¹ ' + item.offers.categoryOffer.discountValue + ' Off'})
          </p>`;
      }

      const cartItemHTML = `
        <div class="flex gap-6 pb-6 border-b" data-item-id="${item.productId}">
          <div class="w-32 h-32 bg-gray-50 rounded-lg overflow-hidden">
            <img src="${
              item.productDetails.coverImage || '/placeholder.svg?height=128&width=128'
            }" 
                 alt="Product" 
                 class="w-full h-full object-cover">
          </div>
          <div class="flex-1">
            <h3 class="text-lg font-medium">${item.productDetails.productName}</h3>
            ${offerHTML}
            ${stockStatusHTML}
            <div class="flex items-center justify-between mt-4">
              <div class="flex items-center border rounded">
                <button class="px-3 py-1 hover:bg-gray-100 decreaseBtn" data-index="${index}" ${
                  stock <= 0 ? 'disabled' : ''
                }>-</button>
                <span class="px-3 py-1 border-x quantityInput" data-index="${index}">${item.quantity}</span>
                <button class="px-3 py-1 hover:bg-gray-100 increaseBtn" data-index="${index}" ${
                  stock <= 0 ? 'disabled' : ''
                }>+</button>
              </div>
              <div>
                <p class="text-lg font-medium itemPrice">â‚¹ ${(discountPrice * item.quantity).toFixed(2)}</p>
                <p class="text-sm text-gray-500 line-through">â‚¹ ${actualPrice}</p>
              </div>
            </div>
            <button 
              class="mt-4 text-gray-500 hover:text-gray-700" 
              onclick="removeCartItem('${item.productId}')">
              Remove
            </button>
          </div>
        </div>
      `;
      cartContainer.innerHTML += cartItemHTML;
    });

    // Update the total price
    cartTotalElement.textContent = `â‚¹ ${totalPrice.toFixed(2)}`;

    // Attach quantity update handlers
    document.querySelectorAll('.increaseBtn').forEach((button) => {
  button.addEventListener('click', async () => {
    const index = button.dataset.index;
    const item = validCartItems[index];
    const quantityInput = document.querySelectorAll('.quantityInput')[index];
    const itemPriceElement = button
      .closest('.flex-1')
      .querySelector('.itemPrice');
    const lineThroughPriceElement = button
      .closest('.flex-1')
      .querySelector('.line-through');

    if (item.quantity < 5 && item.quantity < item.productDetails.Stock) {
      // Increase quantity
      item.quantity += 1;
      quantityInput.textContent = item.quantity;

      // Recalculate item's discounted price
      const discountPrice = item.offers.productOffer
        ? item.offers.productOffer.discountType === 'percentage'
          ? item.productDetails.ListingPrice *
            (1 - item.offers.productOffer.discountValue / 100)
          : item.productDetails.ListingPrice -
            item.offers.productOffer.discountValue
        : item.offers.categoryOffer
        ? item.offers.categoryOffer.discountType === 'percentage'
          ? item.productDetails.ListingPrice *
            (1 - item.offers.categoryOffer.discountValue / 100)
          : item.productDetails.ListingPrice -
            item.offers.categoryOffer.discountValue
        : item.productDetails.ListingPrice;

      const updatedItemPrice = discountPrice * item.quantity;

      // Update item price in the DOM
      itemPriceElement.textContent = `â‚¹ ${updatedItemPrice.toFixed(2)}`;
      // lineThroughPriceElement.textContent = `â‚¹ ${(item.productDetails.ListingPrice * item.quantity).toFixed(2)}`;

      // Update total price and backend
      await updateCart(item, validCartItems, cartTotalElement);
    } else{
      Swal.fire({
        title: 'Limit Reached',
        text: 'You have reached the maximum available stock for this item.',
        icon: 'warning',
        background: '#000000',
        color: '#ffffff',
        confirmButtonText: 'OK',
        customClass: {
          confirmButton: 'bg-white text-black hover:bg-gray-200 focus:ring-2 focus:ring-white'
        }
      }).then(() => {
        // Re-enable the button after alert closes, if the stock is still at limit
        button.disabled = false;
      });
    }
  });
});

document.querySelectorAll('.decreaseBtn').forEach((button) => {
  button.addEventListener('click', async () => {
    const index = button.dataset.index;
    const item = validCartItems[index];
    const quantityInput = document.querySelectorAll('.quantityInput')[index];
    const itemPriceElement = button
      .closest('.flex-1')
      .querySelector('.itemPrice');
    const lineThroughPriceElement = button
      .closest('.flex-1')
      .querySelector('.line-through');

    if (item.quantity > 1) {
      // Decrease quantity
      item.quantity -= 1;
      quantityInput.textContent = item.quantity;

      // Recalculate item's discounted price
      const discountPrice = item.offers.productOffer
        ? item.offers.productOffer.discountType === 'percentage'
          ? item.productDetails.ListingPrice *
            (1 - item.offers.productOffer.discountValue / 100)
          : item.productDetails.ListingPrice -
            item.offers.productOffer.discountValue
        : item.offers.categoryOffer
        ? item.offers.categoryOffer.discountType === 'percentage'
          ? item.productDetails.ListingPrice *
            (1 - item.offers.categoryOffer.discountValue / 100)
          : item.productDetails.ListingPrice -
            item.offers.categoryOffer.discountValue
        : item.productDetails.ListingPrice;

      const updatedItemPrice = discountPrice * item.quantity;

      // Update item price in the DOM
      itemPriceElement.textContent = `â‚¹ ${updatedItemPrice.toFixed(2)}`;
      // lineThroughPriceElement.textContent = `â‚¹ ${(item.productDetails.ListingPrice * item.quantity).toFixed(2)}`;

      // Update total price and backend
      await updateCart(item, validCartItems, cartTotalElement);
    } 
  });
});

  } catch (error) {
    console.error('Failed to load cart items:', error);
  }
}

// Helper function to update cart
async function updateCart(item, validCartItems, cartTotalElement) {
  try {
    // Update backend
    await axios.post('/updateCartItem', {
      productId: item.productId,
      quantity: item.quantity,
    });

    // Recalculate total price
    let totalPrice = 0;
    validCartItems.forEach((cartItem) => {
      const discountPrice = cartItem.offers.productOffer
        ? (cartItem.offers.productOffer.discountType === 'percentage'
            ? cartItem.productDetails.ListingPrice * (1 - cartItem.offers.productOffer.discountValue / 100)
            : cartItem.productDetails.ListingPrice - cartItem.offers.productOffer.discountValue)
        : cartItem.offers.categoryOffer
        ? (cartItem.offers.categoryOffer.discountType === 'percentage'
            ? cartItem.productDetails.ListingPrice * (1 - cartItem.offers.categoryOffer.discountValue / 100)
            : cartItem.productDetails.ListingPrice - cartItem.offers.categoryOffer.discountValue)
        : cartItem.productDetails.ListingPrice;

      totalPrice += discountPrice * cartItem.quantity;
    });

    // Update total price in the UI
    cartTotalElement.textContent = `â‚¹ ${totalPrice.toFixed(2)}`;
  } catch (error) {
    console.error('Failed to update cart:', error);
  }
}

// Initialize cart items
getCartItems();






const cartButton = document.getElementById('cart-button');
const cartSidebar = document.getElementById('cart-sidebar');
const cartOverlay = document.getElementById('cart-overlay');
const closeButton = document.getElementById('close-cart');

function toggleCart() {
    const isCartOpen = !cartSidebar.classList.contains('translate-x-full'); // Check if the cart is currently open
    
    // Toggle cart visibility
    cartSidebar.classList.toggle('translate-x-full');
    cartOverlay.classList.toggle('hidden');
    document.body.classList.toggle('overflow-hidden');

    // Reload cart items if the cart is being opened
    if (!isCartOpen) {
        getCartItems();
    }

    // Optionally, reload the page when the cart is closed
    if (isCartOpen && cartSidebar.classList.contains('translate-x-full')) {
        window.location.reload();
    }
}


cartButton.addEventListener('click', toggleCart);
closeButton.addEventListener('click', toggleCart);
cartOverlay.addEventListener('click', toggleCart);

document.addEventListener('keydown', function(event) {
    if (event.key === 'Escape' && !cartSidebar.classList.contains('translate-x-full')) {
        toggleCart();
    }
});
        function toggleDropdown(event) {
    event.preventDefault(); // Prevent default link behavior
    const dropdown = document.getElementById('dropdown');
    dropdown.classList.toggle('hidden'); // Tailwind's `hidden` class
  }

  // Example: Update user info dynamically
  document.getElementById('user-name').textContent = 'Jane Doe';
  document.getElementById('user-email').textContent = 'jane.doe@example.com';

  async function removeCartItem(itemId) {
  try {
    // Show animated confirmation dialog
    const result = await Swal.fire({
      title: 'Remove Item?',
      text: "This item will be removed from your cart",
      icon: 'warning',
      background: '#000000',
      color: '#ffffff',
      backdrop: `
        rgba(0,0,0,0.8)
        url("/images/nyan-cat.gif")
        left top
        no-repeat
      `,
      showClass: {
        popup: `
          animate__animated
          animate__fadeInDown
          animate__faster
        `
      },
      hideClass: {
        popup: `
          animate__animated
          animate__fadeOutUp
          animate__faster
        `
      },
      showCancelButton: true,
      confirmButtonColor: '#ffffff',
      cancelButtonColor: '#666666',
      confirmButtonText: 'Yes, remove it!',
      customClass: {
        title: 'text-white',
        content: 'text-gray-300',
        confirmButton: 'bg-white text-black hover:bg-gray-200 focus:ring-2 focus:ring-white',
        cancelButton: 'bg-gray-600 text-white hover:bg-gray-700 focus:ring-2 focus:ring-gray-600'
      }
    });

    if (result.isConfirmed) {
      const response = await axios.delete('/removeCartItem', {
        data: { itemId }
      });

      if (response.status === 200) {
        // Show animated success message
        await Swal.fire({
          title: 'Removed!',
          text: 'Item has been removed from cart',
          icon: 'success',
          background: '#000000',
          color: '#ffffff',
          showClass: {
            popup: `
              animate__animated 
              animate__flipInX
              animate__faster
            `
          },
          hideClass: {
            popup: `
              animate__animated
              animate__flipOutX
              animate__faster
            `
          },
          customClass: {
            title: 'text-white',
            content: 'text-gray-300',
            confirmButton: 'bg-white text-black hover:bg-gray-200 focus:ring-2 focus:ring-white'
          }
        });
        
        document.getElementById('cart-container').innerHTML = '';
        getCartItems();
      }
    }
  } catch (error) {
    console.error('Failed to remove item:', error);
    // Show animated error message
    await Swal.fire({
      title: 'Error!',
      text: 'Failed to remove item. Please try again.',
      icon: 'error',
      background: '#000000', 
      color: '#ffffff',
      showClass: {
        popup: `
          animate__animated
          animate__shakeX
          animate__faster
        `
      },
      customClass: {
        title: 'text-white',
        content: 'text-gray-300',
        confirmButton: 'bg-white text-black hover:bg-gray-200 focus:ring-2 focus:ring-white'
      }
    });
  }
}

const whislistButton = document.getElementById('wishlist-button')
whislistButton.addEventListener('click',() => {
  window.location.href = '/getWishlist'
})



</script>
